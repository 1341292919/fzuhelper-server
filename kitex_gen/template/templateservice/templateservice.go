// Code generated by Kitex v0.6.2. DO NOT EDIT.

package templateservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	template "github.com/west2-online/fzuhelper-server/kitex_gen/template"
)

func serviceInfo() *kitex.ServiceInfo {
	return templateServiceServiceInfo
}

var templateServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TemplateService"
	handlerType := (*template.TemplateService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Ping": kitex.NewMethodInfo(pingHandler, newTemplateServicePingArgs, newTemplateServicePingResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "template",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServicePingArgs)
	realResult := result.(*template.TemplateServicePingResult)
	success, err := handler.(template.TemplateService).Ping(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServicePingArgs() interface{} {
	return template.NewTemplateServicePingArgs()
}

func newTemplateServicePingResult() interface{} {
	return template.NewTemplateServicePingResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Ping(ctx context.Context, req *template.PingRequest) (r *template.PingResponse, err error) {
	var _args template.TemplateServicePingArgs
	_args.Req = req
	var _result template.TemplateServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
